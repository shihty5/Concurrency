package com.peter.concurrency.example;

import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveTask;

public class ForkJoinExample {

    private static int[] arr = {0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3, 0, 1, 23, 4, 5, 6, 7, 8, 3, 2, 1, 42, 2, 54, 2, 234, 3};

    private static int[] test = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

    public static void main(String[] args) {

        Long start = System.currentTimeMillis();
        int n = new ForkJoinPool().invoke(new ForkJoinTask(0, test.length - 1));
        System.out.println(n);
        Long end = System.currentTimeMillis() - start;
        System.out.println("Fork Join used " + end + "ms");

        start = System.currentTimeMillis();
        n = check(test);
        System.out.println(n);
        end = System.currentTimeMillis() - start;
        System.out.println("normal check used " + end + "ms");
    }

    private static int check(int[] arr) {
        int count = 0;
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] < 5) count++;
        }
        return count;
    }

    private static class ForkJoinTask extends RecursiveTask<Integer> {

        private int first;
        private int last;

        public ForkJoinTask(int first, int last) {
            this.first = first;
            this.last = last;
        }

        @Override
        protected Integer compute() {
            int subCount;
            if (last - first < 10) {
                subCount = 0;
                for (int i = first; i <= last; i++) {
                    if (test[i] < 5) {
                        subCount++;
                    }
                }
            } else {
                int mid = (last + first) >>> 1;
                ForkJoinTask left = new ForkJoinTask(first, mid);
                left.fork();
                ForkJoinTask right = new ForkJoinTask(mid, last);
                right.fork();

                subCount = left.join();
                subCount += right.join();

            }
            return subCount;
        }
    }
}
